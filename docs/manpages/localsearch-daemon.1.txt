localsearch-daemon(1)
=====================

== NAME

localsearch-daemon - Start, stop, restart and list daemons responsible for
indexing content

== SYNOPSIS

....
localsearch daemon [options...]
localsearch daemon -s | -t [daemons] | -k [daemons] | -l
localsearch daemon -f | -w [ontology]
localsearch daemon --miner <miner> --pause[-for-process] <reason>
localsearch daemon --miner <miner> --resume <cookie>
....

== DESCRIPTION

Tracker indexes content with daemon processes that run in the background.
The *localsearch daemon* command allows for control of these components.
This ranges from starting, stopping and killing processes to pausing and
resuming them.

In addition to all this, there are ways to follow or watch what is
happening in real time from a top level and right down where the SPARQL
commits are happening too.

If no arguments are provided this command will show the current status
of all Tracker data miners.

The data miners can be paused or resumed using this command and you can
also list miners running and available.

== OPTIONS

*-k, --kill::
  This uses SIGKILL to stop all Tracker processes found matching the
  parameter, if no extra parameter is passed, "all" will be assumed.
  This is not advised unless you are having problems stopping Tracker in
  the first place. This *GUARANTEES* death.
*-t, --terminate=::
  This uses SIGTERM to stop all Tracker processes.  This is recommended over
  --kill because it gives the processes time to shutdown cleanly.
*-s, --start*::
  Starts all miners.
*-f, --follow*::
  Follow status changes to daemons as they happen. This is a top level
  view of what is happening. You will see the name for each daemon and a
  state with the progress in that state.

This requires Ctrl+C to stop and return to the command line. Each new
status is put on a new line.

*-w, --watch=[_ontology_]*::
  Watch changes that happen to the database in real time. This requires
  Ctrl+C to stop and return to the command line.

If _ontology_ is unspecified, all updates are shown. The _ontology_ can
be a comma separated list of shorthand or long hand ontology properties.
For example:

....
    $ localsearch daemon -w nie:url,nie:mimeType,nfo:fileSize,nie:dataSource
    Now listening for resource updates to the database
    All nie:plainTextContent properties are omitted

    Press Ctrl+C to stop

    'nfo:Document'
       'nfo:fileSize' = '1770'
       'nie:dataSource' = 'http://tracker.api.gnome.org/ontology/v3/tracker#extractor-data-source'
       'nie:mimeType' = 'text/plain'
       'nie:url' = 'file:///home/martyn/.bash_aliases'
    'nfo:Document'
       'nie:dataSource' = 'http://tracker.api.gnome.org/ontology/v3/tracker#extractor-data-source'

    ...
....
